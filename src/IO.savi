// TODO: Finish auditing safety of the boundaries of this library.

:enum IO.Action
  :member Opened 1
  :member OpenFailed 2
  :member Read 3
  :member Write 4
  :member Closed 5
  :member OpenedChild 6
  :member ClosedChild 7

:trait IO.Engine(ActionType val)
  :fun ref react(event AsioEvent) @
    :yields ActionType for None

  :fun ref deferred_action(input_action ActionType) @
    // TODO: :yields ActionType for None
    yield input_action
    @

:trait tag IO.Actor(ActionType val)
  :is AsioEvent.Actor
  :fun io @->(IO.Engine(ActionType))
  :fun ref io_react(action ActionType) @

  :be io_deferred_action(input_action ActionType)
    @io.deferred_action(input_action) -> (action | @io_react(action))

  :: This is a special behaviour that hooks into the AsioEvent.Actor runtime,
  :: called whenever an event handle we're subscribed to receives an event.
  ::
  :: We expect the _io engine to interpret the event into an action to yield,
  :: and we will forward the yielded action the the io_react method.
  :be _asio_event(event AsioEvent)
    @io.react(event) -> (action | @io_react(action))

:class IO.CoreEngine
  :is IO.Engine(IO.Action)
  :is ByteStream.Source

  :copies _WriteBuffer
  :is ByteStream.Sink

  :var _event_id AsioEvent.ID: AsioEvent.ID.null
  :var _fd U32: -1
  :var _os_error: OSError.None
  :var _pending_connect_count U32: 0
  :var _has_closed Bool: False
  :var _is_readable Bool: False

  :var _is_send_shutdown Bool: False
  :var _is_recv_shutdown Bool: False

  :fun is_open: @_event_id.is_not_null && @_has_closed.not
  :fun has_opened: @_event_id.is_not_null || @_has_closed
  :fun is_waiting_to_open: @has_opened.not
  :fun has_closed: @_has_closed

  :fun is_readable: @_is_readable

  :fun os_error: @_os_error

  :: Create an `IO.CoreEngine` associated with the given `AsioEvent.ID`.
  :new (@_event_id)

  :: Get the `AsioEvent.ID` associated with this `IO.CoreEngine`.
  :fun event_id: @_event_id

  :: DEPRECATED: Use `new` with an `AsioEvent.ID` instead.
  :new new_tcp_connect!(
    actor AsioEvent.Actor
    host String
    service String
    from String = ""
  )
    asio_flags = if Platform.is_windows (
      AsioEvent.Flags.read_write
    |
      AsioEvent.Flags.read_write_oneshot
    )
    connect_count = _FFI.pony_os_connect_tcp(
      actor, host.cstring, service.cstring, from.cstring, asio_flags
    )
    if (connect_count == 0) error!
    @_pending_connect_count = connect_count

  :: DEPRECATED: Use `new` with an `AsioEvent.ID` instead.
  :new new_from_fd_rw(actor AsioEvent.Actor, @_fd)
    asio_flags = if Platform.is_windows (
      AsioEvent.Flags.read_write
    |
      AsioEvent.Flags.read_write_oneshot
    )
    @_event_id = _FFI.pony_asio_event_create(actor, @_fd, asio_flags, 0, True)

  :: DEPRECATED: Use `new` with an `AsioEvent.ID` instead.
  :new new_from_fd_r(actor AsioEvent.Actor, @_fd)
    asio_flags = AsioEvent.Flags.read
    @_event_id = _FFI.pony_asio_event_create(actor, @_fd, asio_flags, 0, True)

  :fun ref _clear_state_after_final_dispose
    @_event_id = AsioEvent.ID.null
    @_fd = -1
    @_has_closed = True
    @_is_readable = False
    @_is_writable = False
    @_is_send_shutdown = True
    @_is_recv_shutdown = True

  :: Receive bytes into the given read buffer, starting at the buffer's end.
  :: Raises an error and initiates a hard close if the socket was closed
  :: on the other side of the connection.
  :fun ref emit_bytes_into!(read_buffer Bytes'ref) USize
    try (
      orig_size = read_buffer.size
      bytes_read = _FFI.pony_os_recv!(
        @_event_id
        read_buffer.cpointer(orig_size)
        read_buffer.space - orig_size
      )
      new_size = orig_size + bytes_read
      read_buffer.resize_possibly_including_uninitialized_memory(new_size)

      // If we read zero bytes, we know that further reading would block,
      // so we'll set the event handle as non-readable and try again later.
      // This is safe because the asio thread isn't currently subscribed
      // for a read event so will not be writing to the readable flag.
      if (bytes_read == 0) (
        _FFI.pony_asio_event_set_readable(@_event_id, False)
        @_is_readable = False
        _FFI.pony_asio_event_resubscribe_read(@_event_id)
      )

      bytes_read
    |
      @_is_readable = False
      error!
    )

  :fun ref adopt_event!(event AsioEvent)
    if @is_open @hard_close
    @_adopt_event!(event)
    @

  :fun ref _adopt_event!(event AsioEvent) @
    fd = _FFI.pony_asio_event_fd(event.id)
    os_error = _FFI.Util.check_os_error(fd)

    // Check if the above system call failed. If so, we bail out here.
    if (os_error != OSError.None) (
      _FFI.pony_asio_event_unsubscribe(event.id)
      _FFI.pony_os_socket_close(fd)
      @_os_error = os_error
      error!
    )

    // Adopt the event.
    @_event_id = event.id
    @_fd = fd
    @_is_writable = True // TODO: Remove these lines?
    @_is_readable = True // TODO: Remove these lines?
    @

  :fun ref react(event AsioEvent) @
    :yields IO.Action for None
    case (
    // First, if this is a disposable event handle, just dispose of it.
    // We won't yield any actions back to the caller about this,
    // unless it is the event that we own.
    | event.is_disposable |
      _FFI.pony_asio_event_destroy(event.id)
      if (event.id === @_event_id) (
        @_clear_state_after_final_dispose
        yield IO.Action.Closed
      )

    // If we own this event, continue by yielding any relevant actions.
    | event.id === @_event_id |
      @_event_notify_continue(event) -> (action | yield action)

    // If this engine is waiting to open, try adopting this new event to open.
    | @is_waiting_to_open && event.is_writable |
      try (
        @_pending_connect_count -= 1
        @_adopt_event!(event)
        yield IO.Action.Opened
        @_event_notify_continue(event) -> (action | yield action)
      |
        // If there are no more pending connections, our last one has failed
        // and we have no choice but to admit final failure.
        if (@_pending_connect_count == 0) (
          @_clear_state_after_final_dispose
          yield IO.Action.OpenFailed
        )
      )

    // ignore
    | @_event_id.is_null |

    // Otherwise, this is an event that we don't own and don't want to own,
    // so we unsubscribe from it, allowing it to become disposable later,
    // at which point it will finally get cleaned up and freed.
    |
      _FFI.pony_asio_event_unsubscribe(@_event_id)
    )
    @

  :: Handle incoming events for the event handle that we already own.
  :fun ref _event_notify_continue(event AsioEvent)
    :yields IO.Action for None
    if event.is_writable (
      @_is_writable = True
      // TODO: complete writes, pending writes logic from Pony
      yield IO.Action.Write
    )
    if event.is_readable (
      @_is_readable = True
      yield IO.Action.Read
    )
    if @_has_closed @_close
    None

  :: Attempt to close the connection gracefully, after all writes are sent.
  :: New writes arriving after this will be ignored and discarded.
  :: All data currently available to be read from the socket will be read.
  :: However, if the connection is muted, a hard close will be done instead,
  :: closing the socket immediately with no more data being read from it.
  :fun ref close Bool: if Platform.is_windows (@_close | @hard_close)
  :fun ref _close Bool
    @_has_closed = True

    // Start shutting down the socket if it's ready for that step.
    if (
      @_is_send_shutdown.not
      // TODO:
      // && @_pending_connect_count == 0
      // && @_pending_writev_total == 0
    ) (
      @_is_send_shutdown = True
      if @is_open (
        _FFI.pony_os_socket_shutdown(@_fd)
      |
        @_is_recv_shutdown = True
      )
    )

    // Finish with a hard close if the socket is ready for that step.
    did_close = False
    if (@is_open && @_is_send_shutdown && @_is_recv_shutdown) (
      did_close = @hard_close
    )

    // On windows, hard_close doesn't unsubscribe the socket, because we want
    // to wait for all outstanding IO.CP operations to be completed or cancelled.
    // So, we finish up here in a later call to this function by unsubscribing,
    // after the socket is no longer readable and we have no pending writes.
    if (
      Platform.is_windows
      && @has_closed && @_is_readable.not // TODO: && @_pending_sent == 0
    ) (
      _FFI.pony_asio_event_unsubscribe(@_event_id)
    )

    did_close

  :: When an error happens, this function is invoked for a non-graceful close.
  :: Unlike the close function, this one won't wait around to finish reading.
  :: This function is also used as the final step of a graceful shutdown.
  :fun ref hard_close Bool
    if @is_open (
      // TODO:
      // @_pending_writev_total = 0
      // @_pending_writev.clear
      // @_pending_sent = 0

      if Platform.is_windows.not (
        _FFI.pony_asio_event_unsubscribe(@_event_id)
        @_is_readable = False
        @_is_writable = False
        _FFI.pony_asio_event_set_readable(@_event_id, False)
        _FFI.pony_asio_event_set_writeable(@_event_id, False)
      )

      _FFI.pony_os_socket_close(@_fd)
      @_fd = -1
      @_has_closed = True
      @_is_send_shutdown = True
      @_is_recv_shutdown = True

      True
    |
      False
    )
